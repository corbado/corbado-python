# coding: utf-8

"""
    Corbado Backend API

    # Introduction This documentation gives an overview of all Corbado Backend API calls to implement passwordless authentication with Passkeys. 

    The version of the OpenAPI document: 2.0.0
    Contact: support@corbado.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from corbado_python_sdk.generated.models.identifier import Identifier
from corbado_python_sdk.generated.models.social_account import SocialAccount
from corbado_python_sdk.generated.models.user_status import UserStatus
from typing import Optional, Set
from typing_extensions import Self

class UserAggregate(BaseModel):
    """
    UserAggregate
    """ # noqa: E501
    user_id: StrictStr = Field(alias="userID")
    full_name: Optional[StrictStr] = Field(default=None, alias="fullName")
    status: UserStatus
    explicit_webauthn_id: Optional[StrictStr] = Field(default=None, alias="explicitWebauthnID")
    email_identifiers: List[Identifier] = Field(alias="emailIdentifiers")
    phone_number_identifiers: List[Identifier] = Field(alias="phoneNumberIdentifiers")
    username_identifiers: List[Identifier] = Field(alias="usernameIdentifiers")
    social_accounts: List[SocialAccount] = Field(alias="socialAccounts")
    created: StrictStr
    created_ms: StrictInt = Field(alias="createdMS")
    updated: StrictStr
    updated_ms: StrictInt = Field(alias="updatedMs")
    __properties: ClassVar[List[str]] = ["userID", "fullName", "status", "explicitWebauthnID", "emailIdentifiers", "phoneNumberIdentifiers", "usernameIdentifiers", "socialAccounts", "created", "createdMS", "updated", "updatedMs"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserAggregate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in email_identifiers (list)
        _items = []
        if self.email_identifiers:
            for _item_email_identifiers in self.email_identifiers:
                if _item_email_identifiers:
                    _items.append(_item_email_identifiers.to_dict())
            _dict['emailIdentifiers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in phone_number_identifiers (list)
        _items = []
        if self.phone_number_identifiers:
            for _item_phone_number_identifiers in self.phone_number_identifiers:
                if _item_phone_number_identifiers:
                    _items.append(_item_phone_number_identifiers.to_dict())
            _dict['phoneNumberIdentifiers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in username_identifiers (list)
        _items = []
        if self.username_identifiers:
            for _item_username_identifiers in self.username_identifiers:
                if _item_username_identifiers:
                    _items.append(_item_username_identifiers.to_dict())
            _dict['usernameIdentifiers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in social_accounts (list)
        _items = []
        if self.social_accounts:
            for _item_social_accounts in self.social_accounts:
                if _item_social_accounts:
                    _items.append(_item_social_accounts.to_dict())
            _dict['socialAccounts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserAggregate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "userID": obj.get("userID"),
            "fullName": obj.get("fullName"),
            "status": obj.get("status"),
            "explicitWebauthnID": obj.get("explicitWebauthnID"),
            "emailIdentifiers": [Identifier.from_dict(_item) for _item in obj["emailIdentifiers"]] if obj.get("emailIdentifiers") is not None else None,
            "phoneNumberIdentifiers": [Identifier.from_dict(_item) for _item in obj["phoneNumberIdentifiers"]] if obj.get("phoneNumberIdentifiers") is not None else None,
            "usernameIdentifiers": [Identifier.from_dict(_item) for _item in obj["usernameIdentifiers"]] if obj.get("usernameIdentifiers") is not None else None,
            "socialAccounts": [SocialAccount.from_dict(_item) for _item in obj["socialAccounts"]] if obj.get("socialAccounts") is not None else None,
            "created": obj.get("created"),
            "createdMS": obj.get("createdMS"),
            "updated": obj.get("updated"),
            "updatedMs": obj.get("updatedMs")
        })
        return _obj


